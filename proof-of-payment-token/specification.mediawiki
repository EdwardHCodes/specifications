<pre>
  Title: Proof-of-Payment Authorization Framework
  Author: Shammah Chancellor <email@here.com>
          Harry Barber <harrybarber@protonmail.com>
  Status: Draft
  Created: 2019-11-15
  License: MIT
</pre>

== Introduction ==

=== Abstract ===

The Proof-of-Payment (POP) token authorization framework enables a third-party application to obtain limited access to an HTTP resource via Bitcoin Cash payment.

=== Notational Conventions ===

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [[https://www.ietf.org/rfc/rfc2119.txt|RFC 2119]].

The rule URI-reference is included from [[https://tools.ietf.org/html/rfc3986|Uniform Resource Identifier (URI): Generic Syntax]].

Certain security-related terms are to be understood in the sense defined in [https://tools.ietf.org/html/rfc4949|RFC4949].  These terms include, but are not limited to, "attack", "authentication", "authorization", "certificate", "confidentiality" "credential", "encryption", "identity", "sign", "signature", "trust", "validate", and "verify".

Unless otherwise noted, all the protocol parameter names and values are case sensitive.

=== Motivation ===

Monetization of goods over the internet often involves the restriction of specific resources via some form of paywall. As a result, much of web design involves architecting complex authorization schemes involving third party payment processors via some form of subscription-based API Key. 

Bitcoin allows payments across the internet without the need for trusted intermediaries and the [[https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki|BIP70 Payment Protocol]] provides an extra layer of customer assurance during payments.

[[https://tools.ietf.org/html/rfc6750|Bearer tokens (RFC6750)]] provide an authorization framework allowing manage access to protected resources.

A standardized protocol combining the two would provide merchants with a pluggable way to monetize their services.

=== Terminology ===

<pre>
Proof-of-Payment (POP) Token
  A security token with the property that any party in possession of the token (a "bearer") can use the token in any way that any other party in possession of it can.  Using a POP token does not require a bearer to prove possession of cryptographic key material (proof-of-possession).

Resource Merchant
  An entity capable of requesting payment for a protected resource. 

Resource Server
  The server hosting the protected resources, capable of accepting and responding to protected resource requests using POP tokens.

Payment Server
  The server issuing access tokens to the client after successfully authenticating the resource merchant, verifying payment, and obtaining authorization.

Client
  An application making protected resource requests on behalf of the resource merchant and with its authorization. The term "client" does not imply any particular implementation characteristics (e.g., whether the application executes on a server, a desktop, or other devices).
</pre>

== Overview ==

Any party in possession of a bearer token can use it to get access to the associated resources (without demonstrating possession of a cryptographic key). We superimpose the bearer token protocol onto BIP70 to allow clients to pay for access tokens. The bearer token roles of "resource owner" and "authorization server" are replaced by the "resource merchant" and "payment server" respectively.

This authentication method is intended primarily for use in server and proxy authentication.

The protocol's messages are encoded via [[https://developers.google.com/protocol-buffers|Google's Protocol Buffers]], authenticated using [[https://tools.ietf.org/html/rfc5280|X.509 certificates]], and communicated over [[https://tools.ietf.org/html/rfc2616|HTTP/1.1]] using [[[https://tools.ietf.org/html/rfc5246|Transport Layer Security (TLS)]]]. Implementations MUST use TLS to ensure security against various attacks.

This protocol extends both the BIP70 protocol and bearer token protocol, and, as such, prior knowledge of them is advised.

Note that BIP70 must be suplemented with [[https://github.com/bitcoin/bips/blob/master/bip-0071.mediawiki|BIP71]] and [[https://github.com/bitcoin/bips/blob/master/bip-0072.mediawiki|BIP72]], and that both take on a slightly altered form<ref>The headers are as described https://lists.linuxfoundation.org/pipermail/bitcoin-ml/2017-August/000177.html</ref> for Bitcoin Cash. We refer to this this collection of BIPs as BIP70 from hereon after.

=== Protocol Flow ===

[[File:diagrams/flow.png|frame|Figure 1. Abstract Protocol Flow]]

The abstract protocol flow illustrated in Figure 1 describes the interaction between the four roles and includes the following steps:

# The Client requests authorization from the resource merchant.
# The resource merchant responds with a BIP70 payment request.
# The client sends a BIP70 payment fulfilling the payment request to the authorization server.
# The authorization server verifies the payment then responds with a BIP70 payment acknowledgement and a POP token.
# Client sends a request with the POP token attached to the resource server.
# The resource server processes the request and returns the protected resource.

As with RFC6750, in some cases, a client can directly pay an authorization server to obtain an access token without having to first obtain an payment request from a resource merchant.

=== Sequence ===

==== 1. Authorization Request ====

The client requests access to some protected HTTP resource. 

The request MUST NOT 

The query string of the request MUST NOT include <code>code</code> and the <code>Authorization</code> header MUST NOT be present. 

If either of these are present the server MUST assume that the client is attempting authorize itself and process the request as described in [[3. Authorized Request|#3-authorized-request]].

There are no additional restriction placed on the HTTP request.

A successful request MUST be responded to with status code <code>402</code> (''Payment Required'') and the <code>PaymentRequest</code> message defined in the [[https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki#PaymentDetailsPaymentRequest|PaymentDetails/PaymentRequest]] section of BIP70.

<pre>
message PaymentDetails {
        optional string network = 1 [default = "main"]; // "main" or "test"
        repeated Output outputs = 2;        // Where payment should be sent
        required uint64 time = 3;           // Timestamp; when payment request created
        optional uint64 expires = 4;        // Timestamp; when this request should be considered invalid
        optional string memo = 5;           // Human-readable description of request for the customer
        optional string payment_url = 6;    // URL to send Payment and get PaymentACK
        optional bytes merchant_data = 7;   // Arbitrary data to include in the Payment message
}

message PaymentRequest {
        optional uint32 payment_details_version = 1 [default = 1];
        optional string pki_type = 2 [default = "none"];  // none / x509+sha256 / x509+sha1
        optional bytes pki_data = 3;                      // depends on pki_type
        required bytes serialized_payment_details = 4;    // PaymentDetails
        optional bytes signature = 5;                     // pki-dependent signature
}
</pre>

The server MUST populate <code>merchant_data</code> field of the <code>PaymentDetails</code> message, the exact details of this data is left for future specification and are inconsequential to the main flow of the protocol. Post-payment, this data will be signed by the server providing a POP token to the client in order to authenticate metadata uploads.

==== 2. Payment and Token Issuance ====

The client sends the payment in the body of a POST request to the <code>payment_url</code> specified in the <code>PaymentDetails</code> and the server responds with a payment acknowledgement message. This is performed in accordance with BIP70. 

The <code>merchant_data</code> in the clients <code>Payment</code> message MUST be equal to the <code>merchant_data</code> in the servers <code>PaymentDetails</code>. Note here that malicious clients MAY modify the <code>merchant_data</code>, and hence it is RECOMMENDED that it is authenticated in some way (for example, signed with a merchant-only key). 

<pre>
message Payment {
        optional bytes merchant_data = 1;  // From PaymentDetails.merchant_data
        repeated bytes transactions = 2;   // Signed transactions that satisfy PaymentDetails.outputs
        repeated Output refund_to = 3;     // Where to send refunds, if a refund is necessary
        optional string memo = 4;          // Human-readable message for the merchant
}
</pre>

In addition to the BIP70 procedure, the server generates the POP token. This token is identically a [[https://tools.ietf.org/html/rfc6750|Bearer Token]], except with `Bearer` prefix replaced with `POP`.

This response MUST have status code <code>202</code> and include both:

* A <code>Location</code> header <code>{resource path}?code={token string}</code>.
* A <code>Authorization</code> header <code>POP {token string}</code>.

It is RECOMMENDED that the <code>merchant_data</code> is chosen such that the <code>resource path</code> is derivable from it - avoiding session state.

==== 3. Authorized Request ====

The client reconstructs the initial request and MUST include either the code provided in the ... TODO

It is RECOMMENDED that, if the client aims to PUT or POST a payload to the server, the body SHOULD be included in this final request rather than the initial request to avoid repeated transmission or excess session state.

== Rationale ==

=== BIP 70 ===

The BIP70 payment protocol is a widely adopted standard. Extending it in this way allows wallet developers to easily integrate the protocol with minimal work.

=== Statelessness ===

The protocol has been designed with statelessness in mind. By using tokens it requires no extra state in addition to that needed from BIP70.

== Footnotes ==

<references />

== References ==

* [[https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki|BIP70 Payment Protocol]]
* [[https://github.com/bitcoin/bips/blob/master/bip-0071.mediawiki|BIP71 Payment Protocol MIME types]]
* [[https://github.com/bitcoin/bips/blob/master/bip-0072.mediawiki|BIP72 bitcoin: uri extensions for Payment Protocol]]
* [[https://developers.google.com/protocol-buffers|Google's Protocol Buffers]]
* [[https://www.ietf.org/rfc/rfc2119.txt|RFC 2119 - RFC Key Words]]
* [[https://tools.ietf.org/html/rfc5280|RFC 5280 - X.509 Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile]]
